apiVersion: v1
kind: Pod
metadata:
  labels:
    app: nginx-qa-nginx-ingress
    pod-template-hash: 78cd89f9f7
  name: nginx-qa-nginx-ingress
  namespace: nginx-ingress
spec:
  containers:
  - args:
    - -nginx-plus=false
    - -nginx-reload-timeout=0
    - -enable-app-protect=false
    - -nginx-configmaps=$(POD_NAMESPACE)/nginx-qa-nginx-ingress
    - -default-server-tls-secret=$(POD_NAMESPACE)/nginx-qa-nginx-ingress-default-server-tls
    - -ingress-class=nginx-qa
    - -health-status=false
    - -health-status-uri=/nginx-health
    - -nginx-debug=false
    - -v=1
    - -nginx-status=true
    - -nginx-status-port=8080
    - -nginx-status-allow-cidrs=127.0.0.1
    - -report-ingress-status
    - -external-service=nginx-qa-nginx-ingress
    - -enable-leader-election=true
    - -leader-election-lock-name=nginx-qa-nginx-ingress-leader-election
    - -enable-prometheus-metrics=true
    - -prometheus-metrics-listen-port=9113
    - -enable-custom-resources=true
    - -enable-tls-passthrough=false
    - -enable-snippets=false
    - -enable-preview-policies=false
    - -ready-status=true
    - -ready-status-port=8081
    - -enable-latency-metrics=false
    env:
    - name: POD_NAMESPACE
      valueFrom:
        fieldRef:
          apiVersion: v1
          fieldPath: metadata.namespace
    - name: POD_NAME
      valueFrom:
        fieldRef:
          apiVersion: v1
          fieldPath: metadata.name
    image: nginx/nginx-ingress:1.11.3
    imagePullPolicy: IfNotPresent
    name: nginx-qa-nginx-ingress
    ports:
    - containerPort: 80
      name: http
      protocol: TCP
    - containerPort: 443
      name: https
      protocol: TCP
    - containerPort: 9113
      name: prometheus
      protocol: TCP
    - containerPort: 8081
      name: readiness-port
      protocol: TCP
    readinessProbe:
      failureThreshold: 3
      httpGet:
        path: /nginx-ready
        port: readiness-port
        scheme: HTTP
      periodSeconds: 1
      successThreshold: 1
      timeoutSeconds: 1
    resources: {}
    securityContext:
      allowPrivilegeEscalation: true
      capabilities:
        add:
        - NET_BIND_SERVICE
        drop:
        - ALL
      runAsUser: 101
    terminationMessagePath: /dev/termination-log
    terminationMessagePolicy: File
    volumeMounts:
    - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
      name: kube-api-access-swtrz
      readOnly: true
  dnsPolicy: ClusterFirst
  enableServiceLinks: true
  nodeName: node2
  preemptionPolicy: PreemptLowerPriority
  priority: 0
  restartPolicy: Always
  schedulerName: default-scheduler
  securityContext: {}
  serviceAccount: nginx-qa-nginx-ingress
  serviceAccountName: nginx-qa-nginx-ingress
  terminationGracePeriodSeconds: 30
  tolerations:
  - effect: NoExecute
    key: node.kubernetes.io/not-ready
    operator: Exists
    tolerationSeconds: 300
  - effect: NoExecute
    key: node.kubernetes.io/unreachable
    operator: Exists
    tolerationSeconds: 300
  volumes:
  - name: kube-api-access-swtrz
    projected:
      defaultMode: 420
      sources:
      - serviceAccountToken:
          expirationSeconds: 3607
          path: token
      - configMap:
          items:
          - key: ca.crt
            path: ca.crt
          name: kube-root-ca.crt
      - downwardAPI:
          items:
          - fieldRef:
              apiVersion: v1
              fieldPath: metadata.namespace
            path: namespace
